'use strict'; // code generated by pbf v3.2.1

// CommandSenderData ========================================

var CommandSenderData = exports.CommandSenderData = {};

CommandSenderData.read = function (pbf, end) {
    return pbf.readFields(CommandSenderData._readField, {type: 0, name: "", uniqueId: ""}, end);
};
CommandSenderData._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.type = pbf.readVarint();
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.uniqueId = pbf.readString();
};
CommandSenderData.write = function (obj, pbf) {
    if (obj.type) pbf.writeVarintField(1, obj.type);
    if (obj.name) pbf.writeStringField(2, obj.name);
    if (obj.uniqueId) pbf.writeStringField(3, obj.uniqueId);
};

CommandSenderData.Type = {
    "OTHER": {
        "value": 0,
        "options": {}
    },
    "PLAYER": {
        "value": 1,
        "options": {}
    }
};

// HeapData ========================================

var HeapData = exports.HeapData = {};

HeapData.read = function (pbf, end) {
    return pbf.readFields(HeapData._readField, {metadata: null, entries: []}, end);
};
HeapData._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.metadata = HeapMetadata.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.entries.push(HeapEntry.read(pbf, pbf.readVarint() + pbf.pos));
};
HeapData.write = function (obj, pbf) {
    if (obj.metadata) pbf.writeMessage(1, HeapMetadata.write, obj.metadata);
    if (obj.entries) for (var i = 0; i < obj.entries.length; i++) pbf.writeMessage(2, HeapEntry.write, obj.entries[i]);
};

// HeapMetadata ========================================

var HeapMetadata = exports.HeapMetadata = {};

HeapMetadata.read = function (pbf, end) {
    return pbf.readFields(HeapMetadata._readField, {user: null}, end);
};
HeapMetadata._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.user = CommandSenderData.read(pbf, pbf.readVarint() + pbf.pos);
};
HeapMetadata.write = function (obj, pbf) {
    if (obj.user) pbf.writeMessage(1, CommandSenderData.write, obj.user);
};

// HeapEntry ========================================

var HeapEntry = exports.HeapEntry = {};

HeapEntry.read = function (pbf, end) {
    return pbf.readFields(HeapEntry._readField, {order: 0, instances: 0, size: 0, type: ""}, end);
};
HeapEntry._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.order = pbf.readVarint(true);
    else if (tag === 2) obj.instances = pbf.readVarint(true);
    else if (tag === 3) obj.size = pbf.readVarint(true);
    else if (tag === 4) obj.type = pbf.readString();
};
HeapEntry.write = function (obj, pbf) {
    if (obj.order) pbf.writeVarintField(1, obj.order);
    if (obj.instances) pbf.writeVarintField(2, obj.instances);
    if (obj.size) pbf.writeVarintField(3, obj.size);
    if (obj.type) pbf.writeStringField(4, obj.type);
};

// SamplerData ========================================

var SamplerData = exports.SamplerData = {};

SamplerData.read = function (pbf, end) {
    return pbf.readFields(SamplerData._readField, {metadata: null, threads: []}, end);
};
SamplerData._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.metadata = SamplerMetadata.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.threads.push(ThreadNode.read(pbf, pbf.readVarint() + pbf.pos));
};
SamplerData.write = function (obj, pbf) {
    if (obj.metadata) pbf.writeMessage(1, SamplerMetadata.write, obj.metadata);
    if (obj.threads) for (var i = 0; i < obj.threads.length; i++) pbf.writeMessage(2, ThreadNode.write, obj.threads[i]);
};

// SamplerMetadata ========================================

var SamplerMetadata = exports.SamplerMetadata = {};

SamplerMetadata.read = function (pbf, end) {
    return pbf.readFields(SamplerMetadata._readField, {user: null, startTime: 0, interval: 0, threadDumper: null, dataAggregator: null, comment: ""}, end);
};
SamplerMetadata._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.user = CommandSenderData.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.startTime = pbf.readVarint(true);
    else if (tag === 3) obj.interval = pbf.readVarint(true);
    else if (tag === 4) obj.threadDumper = SamplerMetadata.ThreadDumper.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.dataAggregator = SamplerMetadata.DataAggregator.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.comment = pbf.readString();
};
SamplerMetadata.write = function (obj, pbf) {
    if (obj.user) pbf.writeMessage(1, CommandSenderData.write, obj.user);
    if (obj.startTime) pbf.writeVarintField(2, obj.startTime);
    if (obj.interval) pbf.writeVarintField(3, obj.interval);
    if (obj.threadDumper) pbf.writeMessage(4, SamplerMetadata.ThreadDumper.write, obj.threadDumper);
    if (obj.dataAggregator) pbf.writeMessage(5, SamplerMetadata.DataAggregator.write, obj.dataAggregator);
    if (obj.comment) pbf.writeStringField(6, obj.comment);
};

// SamplerMetadata.ThreadDumper ========================================

SamplerMetadata.ThreadDumper = {};

SamplerMetadata.ThreadDumper.read = function (pbf, end) {
    return pbf.readFields(SamplerMetadata.ThreadDumper._readField, {type: 0, ids: [], patterns: []}, end);
};
SamplerMetadata.ThreadDumper._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.type = pbf.readVarint();
    else if (tag === 2) pbf.readPackedVarint(obj.ids, true);
    else if (tag === 3) obj.patterns.push(pbf.readString());
};
SamplerMetadata.ThreadDumper.write = function (obj, pbf) {
    if (obj.type) pbf.writeVarintField(1, obj.type);
    if (obj.ids) pbf.writePackedVarint(2, obj.ids);
    if (obj.patterns) for (var i = 0; i < obj.patterns.length; i++) pbf.writeStringField(3, obj.patterns[i]);
};

SamplerMetadata.ThreadDumper.Type = {
    "ALL": {
        "value": 0,
        "options": {}
    },
    "SPECIFIC": {
        "value": 1,
        "options": {}
    },
    "REGEX": {
        "value": 2,
        "options": {}
    }
};

// SamplerMetadata.DataAggregator ========================================

SamplerMetadata.DataAggregator = {};

SamplerMetadata.DataAggregator.read = function (pbf, end) {
    return pbf.readFields(SamplerMetadata.DataAggregator._readField, {type: 0, threadGrouper: 0, tickLengthThreshold: 0}, end);
};
SamplerMetadata.DataAggregator._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.type = pbf.readVarint();
    else if (tag === 2) obj.threadGrouper = pbf.readVarint();
    else if (tag === 3) obj.tickLengthThreshold = pbf.readVarint(true);
};
SamplerMetadata.DataAggregator.write = function (obj, pbf) {
    if (obj.type) pbf.writeVarintField(1, obj.type);
    if (obj.threadGrouper) pbf.writeVarintField(2, obj.threadGrouper);
    if (obj.tickLengthThreshold) pbf.writeVarintField(3, obj.tickLengthThreshold);
};

SamplerMetadata.DataAggregator.Type = {
    "SIMPLE": {
        "value": 0,
        "options": {}
    },
    "TICKED": {
        "value": 1,
        "options": {}
    }
};

SamplerMetadata.DataAggregator.ThreadGrouper = {
    "BY_NAME": {
        "value": 0,
        "options": {}
    },
    "BY_POOL": {
        "value": 1,
        "options": {}
    },
    "AS_ONE": {
        "value": 2,
        "options": {}
    }
};

// StackTraceNode ========================================

var StackTraceNode = exports.StackTraceNode = {};

StackTraceNode.read = function (pbf, end) {
    return pbf.readFields(StackTraceNode._readField, {time: 0, children: [], className: "", methodName: "", parentLineNumber: 0, lineNumber: 0, methodDesc: ""}, end);
};
StackTraceNode._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.time = pbf.readDouble();
    else if (tag === 2) obj.children.push(StackTraceNode.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.className = pbf.readString();
    else if (tag === 4) obj.methodName = pbf.readString();
    else if (tag === 5) obj.parentLineNumber = pbf.readVarint(true);
    else if (tag === 6) obj.lineNumber = pbf.readVarint(true);
    else if (tag === 7) obj.methodDesc = pbf.readString();
};
StackTraceNode.write = function (obj, pbf) {
    if (obj.time) pbf.writeDoubleField(1, obj.time);
    if (obj.children) for (var i = 0; i < obj.children.length; i++) pbf.writeMessage(2, StackTraceNode.write, obj.children[i]);
    if (obj.className) pbf.writeStringField(3, obj.className);
    if (obj.methodName) pbf.writeStringField(4, obj.methodName);
    if (obj.parentLineNumber) pbf.writeVarintField(5, obj.parentLineNumber);
    if (obj.lineNumber) pbf.writeVarintField(6, obj.lineNumber);
    if (obj.methodDesc) pbf.writeStringField(7, obj.methodDesc);
};

// ThreadNode ========================================

var ThreadNode = exports.ThreadNode = {};

ThreadNode.read = function (pbf, end) {
    return pbf.readFields(ThreadNode._readField, {name: "", time: 0, children: []}, end);
};
ThreadNode._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.time = pbf.readDouble();
    else if (tag === 3) obj.children.push(StackTraceNode.read(pbf, pbf.readVarint() + pbf.pos));
};
ThreadNode.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.time) pbf.writeDoubleField(2, obj.time);
    if (obj.children) for (var i = 0; i < obj.children.length; i++) pbf.writeMessage(3, StackTraceNode.write, obj.children[i]);
};
